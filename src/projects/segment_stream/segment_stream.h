//==============================================================================////  OvenMediaEngine////  Created by Jaejong Bong//  Copyright (c) 2018 AirenSoft. All rights reserved.////==============================================================================#pragma once#include "base/common_types.h"#include "base/publisher/stream.h"#include "stream_packetyzer.h"#include <map>//====================================================================================================// SegmentStream//====================================================================================================class SegmentStream : public Stream {public:    static std::shared_ptr<SegmentStream>    Create(const std::shared_ptr<Application> application, const StreamInfo &info);    explicit SegmentStream(const std::shared_ptr<Application> application, const StreamInfo &info);    virtual ~SegmentStream() final;public :    void SendVideoFrame(std::shared_ptr<MediaTrack> track,                        std::unique_ptr<EncodedFrame> encoded_frame,                        std::unique_ptr<CodecSpecificInfo> codec_info,                        std::unique_ptr<FragmentationHeader> fragmentation) override;    void SendAudioFrame(std::shared_ptr<MediaTrack> track,                        std::unique_ptr<EncodedFrame> encoded_frame,                        std::unique_ptr<CodecSpecificInfo> codec_info,                        std::unique_ptr<FragmentationHeader> fragmentation) override;    bool Start(uint32_t worker_count=0) override;    bool Stop() override;    bool GetPlayList(PlayListType play_list_type, ov::String &play_list);    bool GetSegment(SegmentType type, const ov::String &file_name, std::shared_ptr<ov::Data> &data);private :    std::unique_ptr<StreamPacketyzer> _stream_packetyzer;    std::map<uint32_t, std::shared_ptr<MediaTrack>> _media_tracks;    uint32_t _key_frame_check_timestamp;    uint32_t _previous_key_frame_timestamp;};